// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/v1/steggy.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SteggyServiceClient is the client API for SteggyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SteggyServiceClient interface {
	Encode(ctx context.Context, in *EncodeRequest, opts ...grpc.CallOption) (*EncodeResponse, error)
	Decode(ctx context.Context, in *DecodeRequest, opts ...grpc.CallOption) (*DecodeResponse, error)
}

type steggyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSteggyServiceClient(cc grpc.ClientConnInterface) SteggyServiceClient {
	return &steggyServiceClient{cc}
}

func (c *steggyServiceClient) Encode(ctx context.Context, in *EncodeRequest, opts ...grpc.CallOption) (*EncodeResponse, error) {
	out := new(EncodeResponse)
	err := c.cc.Invoke(ctx, "/api.v1.SteggyService/Encode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steggyServiceClient) Decode(ctx context.Context, in *DecodeRequest, opts ...grpc.CallOption) (*DecodeResponse, error) {
	out := new(DecodeResponse)
	err := c.cc.Invoke(ctx, "/api.v1.SteggyService/Decode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SteggyServiceServer is the server API for SteggyService service.
// All implementations must embed UnimplementedSteggyServiceServer
// for forward compatibility
type SteggyServiceServer interface {
	Encode(context.Context, *EncodeRequest) (*EncodeResponse, error)
	Decode(context.Context, *DecodeRequest) (*DecodeResponse, error)
	mustEmbedUnimplementedSteggyServiceServer()
}

// UnimplementedSteggyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSteggyServiceServer struct {
}

func (UnimplementedSteggyServiceServer) Encode(context.Context, *EncodeRequest) (*EncodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encode not implemented")
}
func (UnimplementedSteggyServiceServer) Decode(context.Context, *DecodeRequest) (*DecodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decode not implemented")
}
func (UnimplementedSteggyServiceServer) mustEmbedUnimplementedSteggyServiceServer() {}

// UnsafeSteggyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SteggyServiceServer will
// result in compilation errors.
type UnsafeSteggyServiceServer interface {
	mustEmbedUnimplementedSteggyServiceServer()
}

func RegisterSteggyServiceServer(s grpc.ServiceRegistrar, srv SteggyServiceServer) {
	s.RegisterService(&SteggyService_ServiceDesc, srv)
}

func _SteggyService_Encode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteggyServiceServer).Encode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.SteggyService/Encode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteggyServiceServer).Encode(ctx, req.(*EncodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteggyService_Decode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteggyServiceServer).Decode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.SteggyService/Decode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteggyServiceServer).Decode(ctx, req.(*DecodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SteggyService_ServiceDesc is the grpc.ServiceDesc for SteggyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SteggyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.SteggyService",
	HandlerType: (*SteggyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Encode",
			Handler:    _SteggyService_Encode_Handler,
		},
		{
			MethodName: "Decode",
			Handler:    _SteggyService_Decode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/steggy.proto",
}
